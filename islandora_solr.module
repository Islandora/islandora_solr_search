<?php

/**
 * @file
 * Implementation of Solr search for the Islandora fedora_search module.
 */

/**
 * Implements hook_init().
 *
 * @global IslandoraSolrQueryProcessor $_islandora_solr_queryclass
 * @staticvar boolean $islandora_solr_init
 */
function islandora_solr_init() {
  // include inc files
  module_load_include('inc', 'islandora_solr', 'includes/islandora_solr.db');
  module_load_include('inc', 'islandora_solr', 'includes/common');
  module_load_include('inc', 'islandora_solr', 'islandora_solr.block');

  static $islandora_solr_init = FALSE;
  if (!$islandora_solr_init) {
    // single underscore followed by the module and another underscore
    global $_islandora_solr_queryclass;
    if (empty($_islandora_solr_queryclass)) {
      $_islandora_solr_queryclass = new IslandoraSolrQueryProcessor();
    }
    $islandora_solr_init = TRUE;
  }
}

/**
 * Implements hook_boot().
 * @global type $conf
 */
function islandora_solr_boot() {
  global $conf;

  // Allow i18n, by using multilingual variables.
  if (module_exists('i18n')) {
    $vars = array(
      'islandora_solr_facets',
      'islandora_solr_result_fields',
      'islandora_solr_searchterms'
    );

    $conf['i18n_variables'] = (isset($conf['i18n_variables']) && is_array($conf['i18n_variables'])) ?
      array_merge($vars, $conf['i18n_variables']):
      $vars;
  }
}

/**
 * Implements hook_menu().
 */
function islandora_solr_menu() {
  $items['islandora/search'] = array(
    'title' => 'Search results',
    'page callback' => 'islandora_solr',
    'access arguments' => array('search islandora solr'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/islandora/search/islandora_solr'] = array(
    'title' => 'Solr client',
    'description' => 'Configure Solr search settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_solr_admin_settings'),
    'access arguments' => array('administer islandora solr'),
    'file' => 'islandora_solr.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['islandora_solr/field'] = array(
    'title' => 'Result field',
    'description' => 'Configuration for result field',
    'page callback' => 'islandora_solr_admin_settings_field',
    'page arguments' => array(2, 3),
    'access arguments' => array('administer islandora solr'),
    'file' => 'islandora_solr.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['islandora_solr/autocomplete_luke'] = array(
    'title' => 'Islandora Solr Luke autocomplete',
    'description' => 'Autocomplete callback to populate solr text fields.',
    'page callback' => '_islandora_solr_autocomplete_luke',
    'access arguments' => array('administer islandora solr'),
    'file' => 'islandora_solr.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Implements hook_admin_paths().
 */
function islandora_solr_admin_paths() {
  $paths = array(
    'admin/config/islandora_solr' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_permission().
 */
function islandora_solr_permission() {
  return array(
    'search islandora solr' => array(
      'title' => t('Search the Solr index'),
      'description' => t('Search for objects in the repository using Solr. This permission exposes the search blocks and allows you to see search results.'),
    ),
    'administer islandora solr' => array(
      'title' => t('Administer Solr'),
      'description' => t('Administer settings for the Solr client.'),
    ),
  );
}


/**
 * Implements hook_theme().
 */
function islandora_solr_theme() {
  // set path
  $path = drupal_get_path('module', 'islandora_solr');
  $file = 'islandora_solr.theme.inc';

  return array(
    // advanced solr search form/block
    'islandora_solr_advanced_search_form' => array(
      'variables' => array(
        'form' => NULL,
      ),
    ),
    // theme admin form
    'islandora_solr_admin_primary_display' => array(
      'path' => $path,
      'file' => 'islandora_solr.admin.inc',
      'render element' => 'form',
    ),
    // theme admin form fields
    'islandora_solr_admin_fields' => array(
      'path' => $path,
      'file' => 'islandora_solr.admin.inc',
      'render element' => 'form',
    ),
    // results page
    'islandora_solr_wrapper' => array(
      'path' => $path . '/theme',
      'file' => $file,
      'template' => 'islandora-solr-wrapper',
      'variables' => array('results' => NULL, 'secondary_profiles' => NULL,  'elements' => array()),
    ),
    // default results display
    'islandora_solr' => array(
      'path' => $path . '/theme',
      'file' => $file,
      'template' => 'islandora-solr',
      'variables' => array('results' => NULL, 'elements' => array(), 'pids' => array()),
    ),
  );
}

/**
 * Implements hook_islandora_solr_primary_display().
 */
function islandora_solr_islandora_solr_primary_display() {
  return array(
    // 'machine_name' => array(
    //   'name' => 'Human Readable Name',
    //   'module' => 'module_name',
    //   'file' => 'FileName.inc',
    //   'class' => 'ClassName',
    //   'function' => 'function_name',
    //   'description' => 'A description of the display profile',
    //   'configuration' => 'path/to/configuration/page',
    // );
    //
    // Note: this class should either be, or extend, the class IslandoraSolrResults.
    //
    'default' => array(
      'name' => t('List (default)'),
      'module' => 'islandora_solr',
      'file' => 'IslandoraSolrResults.inc',
      'class' => "IslandoraSolrResults",
      'function' => "displayResults",
      'description' => t("A simple output."),
    ),
  );
}




/**
 * Page callback: Islandora Solr.
 *
 * Gathers url parameters, and calls the query builder, which prepares the query
 * based on the admin settings and url values.
 * Finds the right display and calls the IslandoraSolrRestuls class to build the
 * display, which it returns to the page.
 *
 * @global IslandoraSolrQueryProcessor $_islandora_solr_queryclass
 *   the IslandoraSolrQueryProcessor object which includes the current query
 *   settings and the raw Solr results.
 * @param $query
 *   The query string
 * @return
 *   A rendered Solr display
 *
 * @see hook_menu()
 */
function islandora_solr($query = NULL) {
  global $_islandora_solr_queryclass;

  // add islandora solr theme css
  drupal_add_css(drupal_get_path('module', 'islandora_solr') . '/css/islandora_solr.theme.css');

  // get all url parameters
  $params = $_GET;

  // get profiles
  $primary_profiles = module_invoke_all('islandora_solr_primary_display');
  $secondary_profiles = module_invoke_all('islandora_solr_secondary_display');

// Get the preferred display profile
  // Order: First choice is what's in the ?profile query var
  //        Second choice is the primary display profile
  //        Third choice is the default IslandoraSolrResults
  $enabled_profiles = array();
  // get enabled displays
  $primary_display_array = variable_get('islandora_solr_primary_display_table', array());
  // if it's set, we take these values
  if (isset($primary_display_array['enabled'])) {
    foreach ($primary_display_array['enabled'] as $key => $value) {
      if ($key === $value) {
        $enabled_profiles[] = $key;
      }
    }
  }

  // Set primary display
  // check if display param is an valid, enabled profile. Else show default.
  if (isset($params['display']) && in_array($params['display'], $enabled_profiles)) {
    $islandora_solr_primary_display = $params['display'];
  }
  else {
    $islandora_solr_primary_display = variable_get('islandora_solr_primary_display', 'default');
    // unset invalid parameter
    unset($params['display']);
  }


  // Build and execute Apache Solr query
  $queryResult = $_islandora_solr_queryclass->buildAndExecuteQuery($query, $params);

  if (empty($_islandora_solr_queryclass->solrResult)) {
    return t('Error searching solr index.');
  }

  // TODO: Also filter secondary displays against those checked in the configuration options.
  if (isset($_GET['solr_profile']) && isset($secondary_profiles[$_GET['solr_profile']])) {
    $profile = $secondary_profiles[$_GET['solr_profile']];
  }
  elseif (isset($primary_profiles[$islandora_solr_primary_display])) {
    $profile = $primary_profiles[$islandora_solr_primary_display];
  }
  else {
    drupal_set_message(check_plain(t('There is an error in the solr search configuration: the display profile is not found.')), 'error');
    $profile = $primary_profiles['default'];
  }
  // Include the file for the display profile
  require_once(drupal_get_path('module', $profile['module']) . '/' . $profile['file']);

  // Get display class and function from current display
  $solr_class = $profile['class'];
  $solr_function = $profile['function'];

  $nope = FALSE;

  // check if the display's class exists
  if (class_exists($solr_class)) {
    $implementation = new $solr_class();
  }
  else {
    $nope = TRUE;
  }

  // check if the display's method exists
  if (!$nope && method_exists($implementation, $solr_function)) {

    // implement results
    $output = $implementation->$solr_function($_islandora_solr_queryclass);
  }
  else {
    $nope = TRUE;
  }

  // Class and method are not found: use default
  if ($nope) {

    $results_class = new IslandoraSolrResults();
    $output = $results_class->displayResults($_islandora_solr_queryclass);
  }

  // debug dump
  if (variable_get('islandora_solr_debug_mode', 0)) {
    $message = t('Params: <br /><pre>!debug</pre>', array('!debug' => print_r($_islandora_solr_queryclass->solrParams, TRUE)));
    drupal_set_message(filter_xss($message, array('pre', 'br')), 'status');
  }

  return $output;
}

/**
 * Implements hook_help().
 *
 * @param type $path
 * @param type $arg
 * @return type
 */
function islandora_solr_help($path, $arg) {
  switch ($path) {
    case 'admin/help#islandora_solr':
      return t(
          '<p>
         The Islandora Solr Search extends the functionality of the Fedora_Repository module.
         This module allows one or more of a series of blocks to be configured to search a solr index.
         This module can co-exist with the original Fedora_Repositories search block, but Solr\'s
         additional functionality will normally make the original block redundant.
         </p>
         <p>
         The !guide contains additonal information.
         </p>
         <ul>
           <li>Islandora Solr Search requires a working Solr instance. The !sWiki has full setup instructions</li>
           <li>Once Solr is running and tested, configure <b>Gsearch</b> to update Solr. Consult the !GSearch for details.</li>
           <li>Retreive the !client, unzip it, and copy the <b>Solr</b> directory from the archive to the islandora_solr module\'s folder.</li>
           <li>Go to Administer &gt; Site Configuration &gt; Islandora Solr Client <em>(or click the link below)</em> to configure the module. Set which Solr request handler to use, set the port, host and context for the index to be queried, and select which fields are to be used for filtering. Solr\'s <b>schema.xml</b> and  <b>solrconfig.xml</b> must be configured for the request handler as well as which  fields to index and return.</li>
           <li>The module allows custom code to be used to display search results.&nbsp; If custom PHP code is used, the paths to that codes\'s file and function must be entered here as well.</li>
           <li>Three different blocks are now available under Administer &gt; Site Building &gt; Blocks:&nbsp; Islandora Solr Simple Search Block, Islandora Solr Facet Block, and Islandora Solr Search Block.&nbsp; The configuration setting for each of these blocks will allow you to control their position on the screen, and on which pages they will be displayed.</li>
           <li>The Islandora Solr Simple Search Block will use will add  defType=dismax to the configured request handler. The request handler tag in <b>solrconfig.xml</b> must have an attribute of <b>default="TRUE"</b>.</li>
         </ul>
        ', array(
        '!guide' => l('Islandora Guide', 'https://wiki.duraspace.org/display/ISLANDORA/Islandora+Guide'),
        '!sWiki' => l("Solr Wiki", 'http://wiki.apache.org/solr/SolrTomcat'),
        '!GSearch' => l('GSearch Documentation', 'https://wiki.duraspace.org/display/FCSVCS/Generic+Search+Service+2.2'),
        '!client' => l('Apache Solr php client', 'http://code.google.com/p/solr-php-client'),
          )
      );
  }
}





/**
 * Pings a solr instance for availability.
 *
 * @param $solr_url
 *   A url that points to Solr.
 * @return
 *   Returns ping time in milliseconds or a FALSE boolean
 */
function islandora_solr_ping($solr_url) {
  // check for 'http://' or 'https://' prefix
  $solr_url = islandora_solr_check_http($solr_url);

  // check for valid url string.
  if (!filter_var($solr_url, FILTER_VALIDATE_URL)) {
    return FALSE;
  }

  // split url in host/port/path
  $solr_url_parsed = parse_url($solr_url);

  // if it's not a correct url for solr to check, return false.
  if (!isset($solr_url_parsed['host']) || !isset($solr_url_parsed['port'])) {
    return FALSE;
  }

  // call solr
  $solr_service = new Apache_Solr_Service($solr_url_parsed['host'], $solr_url_parsed['port'], $solr_url_parsed['path'] . '/');

  // ping solr
  $ping = $solr_service->ping();

  // if a ping time is returned
  if ($ping) {
    // Add 0.1 ms to the ping time so we never return 0.0.
    return $ping + 0.01;
  }

  return FALSE;
}


/**
 * Check for url scheme
 *
 * @param string $url
 *   A url to check
 * @return string
 *   If the url doesn't include a scheme ('http://' or 'https://') then it will
 *   include the url with added 'http://' scheme.
 */
function islandora_solr_check_http($url) {

  // check for 'http://' or 'https://' prefix - if not found, add it.
  if (strpos($url, "http://") === FALSE && strpos($url, "https://") === FALSE) {
    $url = 'http://' . $url;
  }
  return $url;
}



/**
 * Function to get Solr luke as a php array.
 *
 * @param string $solr_url
 *   url which points to solr
 * @param string $field
 *   limit luke results by entering a single solr field
 * @param int $num_terms
 *   number of terms to include per solr field. Terms are indexed strings which
 *   include the number of occurrences in the solr index. Higher occurrences are
 *   listed first. Defaults to 0 because including this can add a siginificant
 *   perfomance hit.
 * @return
 *   if solr is available it returns Solr Luke data as a php array, if not it
 *   returns FALSE.
 */
function islandora_solr_get_luke($solr_url = NULL, $field = NULL, $num_terms = 0) {

  if (!$solr_url) {
    // create url
    $solr_url = variable_get('islandora_solr_url', 'localhost:8080/solr');
  }

  // if solr is available get luke
  if (islandora_solr_ping($solr_url)) {

    // create url
    $luke_url = $solr_url . '/admin/luke';
    // check for http://
    $luke_url = islandora_solr_check_http($luke_url);

    $luke_query = array(
      'wt' => 'json',
      'numTerms' => $num_terms,
    );
    if ($field) {
      $luke_query['fl'] = $field;
    }

    // generate nice url
    $luke_url = url($luke_url, array('absolute' => TRUE, 'query' => $luke_query));

    // get file content (= json string)
    $luke_json = file_get_contents($luke_url, 0, NULL, NULL);

    // decode json to php array
    $luke_array = json_decode($luke_json, TRUE);

    return $luke_array;
  }
  else {
    return FALSE;
  }
}


/**
 * Returns an array containing all fields in Luke that are sortable.
 *
 * @param string $solr_url
 *   url which points to solr
 * @return boolean
 *   returns an array containing all fields in Luke that are sortable. If no
 *   fields are sortable, it returns FALSE
 */
function islandora_solr_get_sortable($solr_url = NULL) {
  // set variable
  $sortable = array();

  $luke = islandora_solr_get_luke($solr_url);

  // check if fields are available
  if (isset($luke['fields']) && !empty($luke['fields'])) {
    // loop over fields
    foreach ($luke['fields'] as $field => $value) {
      // scheck if field is sortable
      // must be indexed and can't be multivalued
      // http://wiki.apache.org/solr/CommonQueryParameters#sort
      if (strstr($value['schema'], "I") != FALSE && strstr($value['schema'], "M") == FALSE) {
        // add field
        $sortable[] = $field;
      }

    }
  }

  // return FALSE if no sortable fields are returned
  if (empty($sortable)) {
    return  FALSE;
  }

  return $sortable;
}

/**
 * Checks a single solr field if it's sortable.
 *
 * @param string $solr_url
 *   url which points to solr
 * @param string $field
 *   solr field to be checked for being sortable
 * @return boolean
 *   Returns TRUE if the given field is sortable, returns FALSE if the field is
 *   not sortable or if field is not set.
 */
function islandora_solr_check_sortable($solr_url = NULL, $field = NULL) {
  // set variable
  $sortable = FALSE;

  if ($field) {
    $luke = islandora_solr_get_luke($solr_url, $field);
    // check if fields are available
    if (!empty($luke['fields'])) {
      $schema = $luke['fields'][$field]['schema'];

      // scheck if field is sortable
      // must be indexed and can't be multivalued
      // http://wiki.apache.org/solr/CommonQueryParameters#sort
      if (strstr($schema, "I") != FALSE && strstr($schema, "M") == FALSE) {
        $sortable = TRUE;
      }
    }
  }
  return $sortable;
}




/**
 * Check if the current context is the search results page.
 *
 * @TODO: checking for display might not be the best way to do this. Need to
 * review the way blocks are created.
 *
 * @param object $islandora_solr_query
 *   The IslandoraSolrQueryProcessor object which includes the current query
 *   settings but at the beginning of IslandoraSolrQueryProcessor::executeQuery().
 * @return boolean
 *   Returns TRUE if the context is the search results page. FALSE if not.
 */
function islandora_solr_results_page($islandora_solr_query) {

  if (isset($islandora_solr_query->display)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}