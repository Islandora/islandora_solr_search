<?php

/**
 * @file
 * Implementation of Solr search for the Islandora fedora_search module.
 */

//$islandora_query;
$queryClass;
// set current display
$current_display;

/**
 * islandora solr search implentation of hook_init()
 * @global IslandoraSolrQueryProcessor $queryClass
 * @staticvar boolean $islandora_solr_search_init
 */
function islandora_solr_search_init() {
  //Including in the global scope (as was done previously) doesn't quite seem correct.
  module_load_include('inc', 'islandora_solr_search', 'islandora_solr_search.admin');
  module_load_include('inc', 'islandora_solr_search', 'includes/common');
  module_load_include('inc', 'islandora_solr_search', 'IslandoraSolrQueryProcessor');
    
  static $islandora_solr_search_init = false;
  if (!$islandora_solr_search_init) {
    drupal_add_css(drupal_get_path('module', 'islandora_solr_search') . '/css/islandora_solr_search.css');
    global $queryClass;
    if (empty($queryClass)) {
      $queryClass = new IslandoraSolrQueryProcessor();
    }
    $islandora_solr_search_init = true;
  }
}

/**
 * 
 * @global type $conf 
 */
function islandora_solr_search_boot() {
  global $conf;

  // set timezone to suppress strototime strict errors
  ini_set('date.timezone', @date_default_timezone_get());

  // Allow i18n, by using multilingual variables.
  if (module_exists('i18n')) {
    $vars = array(
      'islandora_solr_search_block_facets',
      'islandora_solr_search_result_fields',
      'islandora_solr_searchterms'
    );

    $conf['i18n_variables'] = (isset($conf['i18n_variables']) && is_array($conf['i18n_variables'])) ? 
      array_merge($vars, $conf['i18n_variables']):
      $vars;
  }
}

/**
 * Implementation of hook_menu().
 */
function islandora_solr_search_menu() {
  $items['islandora/solr/search'] = array(
    'page callback' => 'islandora_solr_search',
    'access arguments' => array('view fedora collection'), //depends of fedora_repository view
    'type' => MENU_CALLBACK,
  );
  $items['islandora/solr/process'] = array(
    'page callback' => 'update_solr_url_div',
    'access arguments' => array('view fedora collection'),
    'file' => 'islandora_solr_search.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/islandora_solr_search'] = array(
    'title' => 'Islandora Solr Client',
    'description' => 'Managing Islandora Solr Searching',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_solr_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'islandora_solr_search.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/islandora_solr_search/config'] = array(
    'title' => 'Islandora Solr Client',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file path' => drupal_get_path('module', 'islandora_solr_search'),
    'weight' => -1,
  );


  return $items;
}

/**
 * Implementation of hook_theme().
 */
function islandora_solr_search_theme() {
  // set path
  $path = drupal_get_path('module', 'islandora_solr_search');
  $file = 'islandora_solr_search.theme.inc';

  return array(
    'islandora_solr_search_block_form' => array(
      'arguments' => array(
        'form' => NULL,
      ),
    ),
    // theme admin form
    'islandora_solr_search_admin_settings' => array(
      'path' => $path,
      'file' => 'islandora_solr_search.admin.inc',
      'arguments' => array('form' => NULL),
    ),
    // results page
    'islandora_solr_wrapper' => array(
      'path' => $path . '/theme',
      'file' => $file,
      'template' => 'islandora-solr-wrapper',
      'arguments' => array('results' => NULL, 'secondary_profiles' => NULL,  'elements' => array()),
    ),
    // default results display
    'islandora_solr_search' => array(
      'path' => $path . '/theme',
      'file' => $file,
      'template' => 'islandora-solr-search',
      'arguments' => array('results' => NULL, 'elements' => array()),
    ),
  );
}

/**
 * Implements hook_islandora_solr_primary_display()
 */
function islandora_solr_search_islandora_solr_primary_display() {
  return array(
    // 'machine-name' = array(
    //   'name' => 'Human Readable Name',
    //   'module' => 'module_name',
    //   'file' => 'FileName.inc',
    //   'class' => 'ClassName',
    //   'function' => 'function_name',
    //   'description' => 'A description of the display profile',
    //   'configuration' => 'path/to/configuration/page',
    // );
    //
    // Note: this class should either be, or extend, the class IslandoraSolrResults.
    //
    'default' => array(
      'name' => t('Fields (default)'),
      'module' => 'islandora_solr_search',
      'file' => 'IslandoraSolrResults.inc',
      'class' => "IslandoraSolrResults",
      'function' => "displayResults",
      'description' => t("A simple output."),
    ),
  );
}

/**
 * Implements hook_islandora_solr_query_blocks()
 */
function islandora_solr_search_islandora_solr_query_blocks() {
  return array(
    // 'machine_name' => array(
    //   'name' => 'Human Readable Name',
    //   'module' => 'module_name',
    //   'file' => 'FileName.inc',
    //   'class' => 'ClassName',
    //   'function' => 'method_name',
    //   'form' => 'form_function_name',
    //  ),
    //
    // Note: As in the examples below, it is valid to specify
    // *either* a class and method *or* a form.  The latter implies no
    // class needs to be instantiated.
    //

    'advanced' => array(
      'name' => t('Advanced Search'),
      'module' => 'islandora_solr_search',
      'file' => 'islandora_solr_search.module',
      'class' => NULL,
      'function' => NULL,
      'form' => 'islandora_solr_search_block_form',
    ),
    'simple' => array(
      'name' => t('Simple Search'),
      'module' => 'islandora_solr_search',
      'file' => 'islandora_solr_search.module',
      'class' => NULL,
      'function' => NULL,
      'form' => 'islandora_solr_simple_search_form',
    ),
    'basic_facets' => array(
      'name' => t('Islandora Facet Block'),
      'module' => 'islandora_solr_search',
      'file' => 'IslandoraSolrResults.inc',
      'class' => 'IslandoraSolrResults',
      'function' => 'displayFacets',
      'form' => NULL,
    ),
    'current_query' => array(
      'name' => t('Current Query'),
      'module' => 'islandora_solr_search',
      'file' => 'IslandoraSolrResults.inc',
      'class' => 'IslandoraSolrResults',
      'function' => 'currentQuery',
      'form' => NULL,
    ),
    'display_switch' => array(
      'name' => 'Islandora Display Switch',
      'module' => 'islandora_solr_search',
      'file' => 'islandora_solr_search.module',
      'class' => NULL,
      'function' => 'islandora_solr_search_display',
      'form' => NULL,
    ),
    'limit_results' => array(
      'name' => 'Islandora Limit Results',
      'module' => 'islandora_solr_search',
      'file' => 'islandora_solr_search.module',
      'class' => NULL,
      'function' => 'islandora_solr_search_limit',
      'form' => NULL,
    ),
    'sort' => array(
      'name' => t('Islandora Sort'),
      'module' => 'islandora_solr_search',
      'file' => 'islandora_solr_search.module',
      'class' => NULL,
      'function' => 'islandora_solr_search_sort',
      'form' => NULL,
    ),
  );
}

/**
 * Implementation of hook_block().
 */
function islandora_solr_search_block($op = 'list', $delta = 0, $edit = array()) {
  global $queryClass;

  /*
   * Here I need to call a hook which will return module/file/class/method/name/description
   * for blocks which need a queryClass to render.
   */
  $solr_blocks = module_invoke_all("islandora_solr_query_blocks");

  // The $op parameter determines what piece of information is being requested.
  switch ($op) {
    case 'list':
      // If $op is "list", we just need to return a list of block descriptions.
      // This is used to provide a list of possible blocks to the administrator,
      // end users will not see these descriptions.

      foreach ($solr_blocks as $name => $block) {
        $blocks[$name] = array(
          'info' => $block['name'],
          'cache' => BLOCK_NO_CACHE,
        );
      }

      return $blocks;
    case 'configure':
      // If $op is "configure", we need to provide the administrator with a
      // configuration form. The $delta parameter tells us which block is being
      // configured. In this example, we'll allow the administrator to customize
      // the text of the first block.
      $form = array();

      return $form;
    case 'save':
    // If $op is "save", we need to save settings from the configuration form.
    // Since the first block is the only one that allows configuration, we
    // need to check $delta to make sure we only save it.

    case 'view': default:
      // If $op is "view", then we need to generate the block for display
      // purposes. The $delta parameter tells us which block is being requested.

      if (!empty($solr_blocks[$delta])) {

        // First we'll set the block title.
        $block['subject'] = $solr_blocks[$delta]['name'];

        // Include the file from which the block originates.
        require_once( drupal_get_path('module', $solr_blocks[$delta]['module']) . '/' . $solr_blocks[$delta]['file'] );

        // If a class is present, instantiate it and proceed from there.
        // The variable $queryClass (the IslandoraSolrQueryProcessor, containing
        // the Solr search result), is fed as an argument.
        if (!empty($solr_blocks[$delta]['class'])) {
          $displayClass = new $solr_blocks[$delta]['class']();
          $block_function = $solr_blocks[$delta]['function'];
          if (method_exists($displayClass, $block_function)) {
            $content = $displayClass->$block_function($queryClass);
            $block['content'] = !empty($content) ? $content : NULL;
          }

          // Otherwise, simply load the form.
        }
        elseif (!empty($solr_blocks[$delta]['form'])) {
          $block['content'] = drupal_get_form($solr_blocks[$delta]['form']);
        }
        // else if only a function is given (no class, no form)
        elseif (!empty($solr_blocks[$delta]['function'])) {
          $function = $solr_blocks[$delta]['function'];
          $block['content'] = $function();
        }
      }

      return $block;
  }
}

/**
 * islandora solr simple search form
 * @return type
 */
function islandora_solr_simple_search_form() {
  module_load_include('inc', 'islandora_solr_search', 'IslandoraSolrResults');
  $resultsClass = new IslandoraSolrResults();
  return $resultsClass->build_simple_solr_form();
}

/**
 * islandora solr simple search form submit
 * @param type $form
 * @param type $form_state
 */
function islandora_solr_simple_search_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $searchString = $form_state['values']['islandora_simple_search_query'];
  $searchString = str_replace('/', '~slsh~', $searchString); //replace the slash so url doesn't break
  
  // set query
  $query = array('type' => 'dismax');
  
  drupal_goto("islandora/solr/search/$searchString", $query);
}

/**
 * islandora solr search block form
 * @global type $queryClass
 * @return type
 */
function islandora_solr_search_block_form() {
  global $queryClass;
  islandora_solr_search_init();

  module_load_include('inc', 'islandora_solr_search', 'IslandoraSolrResults');
  $resultsClass = new IslandoraSolrResults();
  return $resultsClass->build_solr_search_form(NULL, NULL, $queryClass->solrQuery);
}

/**
 * theme islandora solr search block form
 * @global type $queryClass
 * @param type $form
 * @return type
 */
function theme_islandora_solr_search_block_form($form) {
  global $queryClass;
  islandora_solr_search_init();

  module_load_include('inc', 'islandora_solr_search', 'IslandoraSolrResults');
  $resultsClass = new IslandoraSolrResults();
  return $resultsClass->theme_solr_search_form($form);
}

/**
 * islandora solr search block form validate
 * @param type $form
 * @param type $form_state
 */
function islandora_solr_search_block_form_validate($form, &$form_state) {

  $repeat = variable_get('islandora_solr_search_block_repeat', '3');
  $found = FALSE;
  for ($fieldNum = 1; $fieldNum <= $repeat; $fieldNum++) {
    if (!empty($form_state['values']["fedora_terms$fieldNum"])) {
      if($form_state['values']["fedora_terms$fieldNum"]== '*'){
       unset($form_state['values']["fedora_terms$fieldNum"]);
       continue;
      }
      $found = TRUE;
    }
  }
  if (!$found) {
    form_set_error('edit_fedora_terms1', t('Please enter search term.'));
  }
}

/**
 * islandora solr search block form submit
 * @global type $queryClass
 * @param type $form
 * @param type $form_state
 */
function islandora_solr_search_block_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  global $queryClass;

  $type_id = trim($form_state['values']['type']);
  $repeat = variable_get('islandora_solr_search_block_repeat', '3');
  $fedora_terms = array();
  $types = array();
  $booleans = array();

  for ($fieldNum = 1; $fieldNum <= $repeat; $fieldNum++) {
    if ($form_state['values']["fedora_terms$fieldNum"]) {
      $types[] = trim($form_state['values']["type$fieldNum"]);
      $fedora_terms[] = lesser_escape(trim($form_state['values']["fedora_terms$fieldNum"]));
    }
    $next = $fieldNum + 1;
    if ($form_state['values']["fedora_terms$next"] && $form_state['values']["fedora_terms$fieldNum"]) {
      $booleans[] = trim($form_state['values']["andor$fieldNum"]);
    }
  }

  for ($iteration = 0; $iteration < count($fedora_terms); $iteration++) {
    //FIXME (minor): t() should be changed to format_string() in this instance, in Drupal 7
    //  The string isn't really translatable, just templated.
    $searchString .= t("!field:(!query) !bool ", array(
        '!field' => $types[$iteration], 
        '!query' => $fedora_terms[$iteration],
        '!bool' => $booleans[$iteration]
    ));
  }
  $searchString = trim($searchString);
  $searchString = str_replace('/', '~slsh~', $searchString); //replace the slash so url doesn't break
  drupal_goto("islandora/solr/search/$searchString");
}

/**
 * @return display switch
 */
function islandora_solr_search_display() {
  global $queryClass;
  
  // set variables
  $output = '';
  
  // check if the page is dealing with search results
  if (class_exists('IslandoraSolrResults')) {
    
    // parameters set in url
    $params = $queryClass->internalSolrParams;
    // set path
    $path = SOLR_SEARCH_PATH . '/' . $queryClass->solrQuery;
    
    // get profiles
    $profiles = module_invoke_all("islandora_solr_primary_display");
    // get the table settings
    $primary_display_array = variable_get('islandora_solr_primary_display_table', array());
    
    if (!empty($primary_display_array)) {

      $weight = $primary_display_array['weight'];
      $enabled = $primary_display_array['enabled'];
      $default = $primary_display_array['default'];

      // sort by weight
      array_multisort(array_values($weight), SORT_ASC, array_keys($weight), SORT_ASC, $weight);

      // set variables
      $list_items = array();

      foreach ($weight as $key => $value) {
        if ($enabled[$key] !== 0) {

          // current display
          if ($params['display']) {
            $current_display = $params['display'];
          }
          else {
            $current_display = $default;
          }
          
          // title
          $display_name = $profiles[$key]['name'];
          
          // query
          $query = array_merge($params, array('display' => $key));
          
          // set attributes
          $attr = array();
          // set class
          if ($key == $current_display) {
            $attr['class'] = 'active';
          }
          // nofollow
          $attr['rel'] = 'nofollow';
          // title
          $attr['title'] = $display_name;
          // url
          $attr['href'] = url($path, array('query' => $query));
          
          // create link
          // we're not using l() because of active classes: http://drupal.org/node/41595
          $item = '<a' . drupal_attributes($attr) . '>' . check_plain($display_name) . '</a>';
          
          // add link to list
          $list_items[] = $item;
        }
      }
      // theme item list (if more than one displays are available)
      if (count($list_items) > 1) {
        $output = theme('item_list', $list_items, NULL, "ul", array('class' => 'islandora-solr-search-display'));
      }
    }
  }
  return $output;
}


/**
 * Callback function for Islandora Result Limit block. Returns a styled list of
 * links to limit the search results per page.
 *
 * @global IslandoraSolrQueryProcessor $queryClass
 * @return string
 *   Returns a themed unordered list containing links to limit search results
 *   per page.
 */
function islandora_solr_search_limit() {
  global $queryClass;
  
  // set variables
  $output = '';
  
  // check if the page is dealing with search results
  if (class_exists('IslandoraSolrResults')) {
    
    // parameters set in url
    $params = $queryClass->internalSolrParams;
    // set path
    $path = SOLR_SEARCH_PATH . '/' . $queryClass->solrQuery;
    
    // get limit results values
    $limit_results = variable_get('islandora_solr_search_limit_results_exposed', '10, 25, 50, 100');
    
    // conver to array
    $limit_results = explode(',', $limit_results);
    
    if (!empty($limit_results)) {

      // set variables
      $list_items = array();

      foreach ($limit_results as $limit) {
        // trim value
        $limit = trim($limit);
        
        if (is_numeric($limit)) {

          // current display
          if ($params['limit']) {
            $current_limit = $params['limit'];
          }
          else {
            $current_limit = variable_get('islandora_solr_search_num_of_results', '25');
          }
          
          // query
          $query = array_merge($params, array('limit' => $limit));
          
          // set attributes
          $attr = array();
          // set class
          if ($limit == $current_limit) {
            $attr['class'] = 'active';
          }
          // nofollow
          $attr['rel'] = 'nofollow';
          // title
          $attr['title'] = t('Show @limit results', array('@limit' => $limit));
          // url
          $attr['href'] = url($path, array('query' => $query));
          
          // create link
          // we're not using l() because of active classes: http://drupal.org/node/41595
          $item = '<a' . drupal_attributes($attr) . '>' . $limit . '</a>';
          
          // add link to list
          $list_items[] = $item;
        }
      }
      // theme item list (if more than one displays are available)
      if (count($list_items) > 1) {
        $styling = (variable_get('islandora_solr_search_limit_results_exposed_styling', 0) == 1) ? ' horizontal' : '';
        $output = theme('item_list', $list_items, NULL, "ul", array('class' => 'islandora-solr-search-limit' . $styling));
      }
    }
  }
  return $output;
}








/**
 * Provides a list to change the sorting on a current search query.
 *
 * @global type $queryClass
 *   the IslandoraSolrQueryProcessor object which includes the current query
 *   settings and the raw Solr results.
 * @return
 *   a rendered list containing Solr sort links
 *
 */
function islandora_solr_search_sort() {
  global $queryClass;

  // set variables
  $output = '';

  // check if the page is dealing with search results
  if (class_exists('IslandoraSolrResults')) {

    // parameters set in url
    $params = isset($queryClass->internalSolrParams) ? $queryClass->internalSolrParams : array();
    // set path
    $path = SOLR_SEARCH_PATH . '/' . $queryClass->solrQuery;

    // get sort terms
    $sort_terms = islandora_build_substitution_list(variable_get('islandora_solr_search_sort_terms', 'score ~ Relevance, PID ~ PID'));

    // get current sort (check in the actual parameters used for the query, because modules might have altered it)
    if (isset($queryClass->solrParams['sort'])) {
      $sort_explode = explode(' ', $queryClass->solrParams['sort']);
      $current_sort_term = $sort_explode[0];
      $current_sort_order = isset($sort_explode[1]) ? $sort_explode[1] : NULL;
    }
    else {
      // if no parameters are given, internally solr defaults to 'score desc'
      // http://wiki.apache.org/solr/CommonQueryParameters#sort
      $current_sort_term = 'score';
      $current_sort_order = 'desc';
    }

    // set variables
    $list_items = array();

    // loop over sort terms
    foreach ($sort_terms as $term => $label) {

      // set indicator variable
      $indicator = '';

      // create query and indicator arrow
      if ($term == $current_sort_term) {
        if (isset($current_sort_order) AND $current_sort_order == 'asc') {
          // set order
          $order = 'desc';
          // create indicator
          $indicator = theme('tablesort_indicator', 'desc');
        }
        else {
          // set order
          $order = 'asc';
          // create indicator
          $indicator = theme('tablesort_indicator', 'asc');
        }
      }
      // the term is score or a date, we want descending order by default
      elseif ($term == 'score' OR stripos($term, 'date')) {
        // set order
        $order = 'desc';
      }
      else {
        // set order
        $order = 'asc';
      }

      // set sort parameter
      $sort_param = $term . ' ' . $order;

      // set query
      $query = array_merge($params, array('sort' => $sort_param));

      // set attributes
      $attr = array();
      // set class
      if ($term == $current_sort_term) {
        $attr['class'] = 'active';
      }
      // nofollow
      $attr['rel'] = 'nofollow';
      // title
      $attr['title'] = $label;
      // url
      $attr['href'] = url($path, array('query' => $query));

      // create link
      // we're not using l() because of active classes: http://drupal.org/node/41595
      $item = '<a' . drupal_attributes($attr) . '>' . check_plain($label) . ' ' . $indicator . '</a>';

      // add link to list
      $list_items[] = $item;
    }

    // theme item list
    if (!empty($list_items)) {
      $output = theme('item_list', $list_items, NULL, 'ul', array('class' => 'islandora-solr-search-sort'));
    }
  }

  return $output;
}






/**
 * Implements hook_forms().
 */
function islandora_solr_search_forms($form_id, $args) {

  // Check if the form_id passed to drupal_get_form() contains the string 'islandora_solr_search_date_filter_form'
  if (strpos($form_id, 'islandora_solr_search_date_filter_form') !== FALSE) {
    // Lets attach islandora_solr_search_date_filter_form to $forms[$form_id].  This effectively allows you to use the same form builder function to build a form with any form_id of your choice.
    $forms[$form_id] = array(
      'callback' => 'islandora_solr_search_date_filter_form',
      'callback arguments' => array($args[0], $args[1], $args[2]),
    );
    return $forms;
  }

  // Check if the form_id passed to drupal_get_form() contains the string 'islandora_solr_search_date_filter_form'
  if (strpos($form_id, 'islandora_solr_search_range_slider_form') !== FALSE) {
    // Lets attach islandora_solr_search_date_filter_form to $forms[$form_id].  This effectively allows you to use the same form builder function to build a form with any form_id of your choice.
    $forms[$form_id] = array(
      'callback' => 'islandora_solr_search_range_slider_form',
      'callback arguments' => array($args[0], $args[1], $args[2], $args[3], $args[4], $args[5]),
    );
    return $forms;
  }

}


function islandora_solr_search_date_filter_form(&$form_state, $form_key, $solr_field, $noslider) {
  global $queryClass;

  // set variables
  $form = array();
 
  $form['#tree'] = TRUE;
  
  
  // Field
  $form['date_filter_term'] = array(
    '#type' => 'hidden',
    '#value' => $solr_field,
    '#name' => 'date_filter_term_' . $form_key,
  );

  // check if default value is possible
  // parameters set in url
  $params = isset($queryClass->internalSolrParams) ? $queryClass->internalSolrParams : array();
  if (isset($params['f'])) {
    $format = 'Y/m/d';
    $term_count = 0;
    foreach ($params['f'] as $key => $filter) {
      if (strpos($filter, $solr_field) === 0) {
        $term_count++;
        // split the filter into field and value
        $filter_split = explode(':', $filter, 2);
        // trim brackets
        $filter_split[1] = trim($filter_split[1], "\"");
        // split range filter string to return formatted date values
        $filter_str = $filter_split[1];
        
        $filter_str = trim($filter_str, '[');
        $filter_str = trim($filter_str, ']');
        $filter_array = explode(' TO ', $filter_str);

        // get timestamps
        $from_unix = strtotime(trim($filter_array[0]));
        $to_unix = strtotime(trim($filter_array[1]));

        // only set default times if from date is lower than to date
        if ($from_unix < $to_unix) {
          $from_default = (strpos($filter_array[0], '*') !== FALSE) ? '*' : format_date($from_unix  + 1, 'custom', $format, 0);
          $to_default = (strpos($filter_array[1], '*') !== FALSE) ? '*' : format_date($to_unix, 'custom', $format, 0);
        }
        else {
          $from_default = NULL;
          $to_default = NULL;
        }
      }
    }
  }
  if ($term_count != 1) {
    $from_default = NULL;
    $to_default = NULL;
  }
  
  if ($from_default != NULL OR $to_default != NULL OR $noslider) {
    $class = 'date-range-expanded';
    $value = t('Hide');
  }
  else {
    $class = 'date-range-collapsed';
    $value = t('Show');
  }

  // Show/hide link
  $form['date_range_expand'] = array(
    '#type' => 'markup',
    '#value' => t('Specify date range: <a href="#" class="toggle-date-range-filter @class">@value</a>', array('@class' => $class, '@value' => $value)),
  );

  // wrapper around form elements
  $form[$form_key] = array(
    '#type' => 'markup',
    '#prefix' => '<div class="date-range-filter-wrapper">',
    '#suffix' => '</div>',
  );

  // description
  $form[$form_key]['date_filter'] = array(
    '#type' => 'markup',
    '#value' => '<div class="description">' . t('Format: @date', array('@date' => date("Y/m/d"))) . '</div>',
  );
  
  
  // From
  $form[$form_key]['date_filter_from'] = array(
    '#type' => 'textfield',
    '#title' => t('From'),
    '#default_value' => ($from_default) ? $from_default : '',
    '#size' => 10,
    '#maxsize' => 10,
    '#attributes' => array('class' => 'islandora-solr-search-datepicker'),
  );

  // To
  $form[$form_key]['date_filter_to'] = array(
    '#type' => 'textfield',
    '#title' => t('To'),
    '#default_value' => ($to_default) ? $to_default : '',
    '#size' => 10,
    '#maxsize' => 10,
    '#attributes' => array('class' => 'islandora-solr-search-datepicker'),
  );

  // Submit
  $form[$form_key]['date_filter_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
    '#name' => 'date_filter_term_' . $form_key,
  );
  $form['#submit'][] = 'islandora_solr_search_date_filter_form_submit';
  
  // Validate
  $form['#validate'][] = 'islandora_solr_search_date_filter_form_validate';
  
  return $form;
}

function islandora_solr_search_date_filter_form_validate($form, &$form_state) {
  // set variables
  $form_key = $form_state['clicked_button']['#array_parents'][0];
  $from = explode('/', $form_state['values'][$form_key]['date_filter_from']);
  $to = explode('/', $form_state['values'][$form_key]['date_filter_to']);

  // default for month and day
  $default = '01';
  
  // if the 'from' value is '*' just skip all checks
  if (trim($from[0]) != '*' ) {
    // Apply some defaults
    if (!isset($from[1])) {
      $from[1] = $default;
    }
    if (!isset($from[2])) {
      $from[2] = $default;
    }
    
    // check from date
    if (!checkdate(intval($from[1]), intval($from[2]), intval($from[0]))) {
      form_set_error($form_key . '][date_filter_from', t('From date isn\'t formatted correctly.'));
    }
  }
  
  // if the 'to' value is '*' just skip all checks
  if (trim($to[0]) != '*' ) {
    // Apply some defaults
    if (!isset($to[1])) {
      $to[1] = $default;
    }
    if (!isset($to[2])) {
      $to[2] = $default;
    }
    
    // check to date
    if (!checkdate(intval($to[1]), intval($to[2]), intval($to[0]))) {
      form_set_error($form_key . '][date_filter_to', t('To date isn\'t formatted correctly.'));
    }
  }
}

function islandora_solr_search_date_filter_form_submit($form, &$form_state) {

  $form_state['rebuild'] = TRUE;
  
  // set variables
  global $queryClass;
  $params = isset($queryClass->internalSolrParams) ? $queryClass->internalSolrParams : array();
  // set path
  $path = SOLR_SEARCH_PATH . '/' . $queryClass->solrQuery;
  // form key
  $form_key = $form_state['clicked_button']['#array_parents'][0];
  // term
  $term = $form_state['values']['date_filter_term'];

  // date
  $from = explode('/', $form_state['values'][$form_key]['date_filter_from']);
  $to = explode('/', $form_state['values'][$form_key]['date_filter_to']);

  // if the 'from' value is '*' just skip all checks
  if (trim($from[0]) != '*' ) {
    // Apply some defaults
    $default = '01';
    if (!isset($from[1])) {
      $from[1] = $default;
    }
    if (!isset($from[2])) {
      $from[2] = $default;
    }
    // create date string
    // example:
    // timestamp:[1900-01-01T00:00:00Z TO 1990-01-01T00:00:00Z]
    $from_str = "$from[0]-$from[1]-$from[2]T00:00:00Z";  
  }
  else {
    $from_str = $from[0];
  }

  // if the 'to' value is '*' just skip all checks
  if (trim($to[0]) != '*' ) {
    // Apply some defaults
    if (!isset($to[1])) {
      $to[1] = $default;
    }
    if (!isset($to[2])) {
      $to[2] = $default;
    }
    // create date string
    // example:
    // timestamp:[1900-01-01T00:00:00Z TO 1990-01-01T00:00:00Z]
    $to_str = "$to[0]-$to[1]-$to[2]T00:00:00Z";
  }
  else {
    $to_str = $to[0];
  }
  
  // create filter
  $filter = "$term:[$from_str TO $to_str]";

  // set date filter key if there are no date filters included
  if (isset($params['f'])) {
    foreach ($params['f'] as $key => $f) {
      if (strpos($f, $term) !== FALSE) {
        array_splice($params['f'], $key);
      }
    }
    $params['f'][] = $filter;
    $query = $params;
  }
  else {
    $query = array_merge_recursive($params, array('f' => array($filter)));
  }

  // redirect
  drupal_goto($path, $query);

}




function islandora_solr_search_range_slider_form(&$form_state, $form_key, $solr_field, $facet_data, $slider_color, $gap, $date_format) {
  global $queryClass;

  // set variables
  $from_default = current($facet_data);
  $to_default = end($facet_data);
  
  $gap = ($gap) ? "($gap)" : $gap;
  
  $form = array();
 
  $form['#tree'] = TRUE;
  
  // Field
  $form['range_slider_term'] = array(
    '#type' => 'hidden',
    '#value' => $solr_field,
    '#name' => 'range_slider_term_' . $form_key,
  );
  
  // Field
  // @TODO: throw all this markup in a theme function
  // total from - to
  // gap
  // canvas
  // slider
  // tooltip over slider with current date
  $form[$form_key] = array(
    '#type' => 'markup',
    '#value' => '<div class="range-slider-fromto" id="range-slider-fromto-' . $form_key . '"><span class="range-slider-from">' . format_date(strtotime(trim($from_default['date'])) + 1, 'custom', $date_format, 0) . '</span> - <span class="range-slider-to">' . format_date(strtotime(trim($to_default['date'])), 'custom', $date_format, 0) . '</span></div><div class="date-range-slider-gap">' . $gap . '</div><div id="slider-amount-' . $form_key . '"></div><div id="date-range-slider-canvas-' . $form_key . '" class="date-range-slider-canvas-wrapper"></div><div id="date-range-slider-' . $form_key . '"></div>', // call theme function instead
  );
  
  // hidden from
  $form[$form_key]['range_slider_hidden_from'] = array(
    '#type' => 'hidden',
    '#default_value' => $from_default['date'], // lowest value
    '#attributes' => array('class' => 'range-slider-hidden-from-' . $form_key),
  );

  // hidden to
  $form[$form_key]['range_slider_hidden_to'] = array(
    '#type' => 'hidden',
    '#default_value' => $to_default['date'], // highest value
    '#attributes' => array('class' => 'range-slider-hidden-to-' . $form_key),
  );
        
  // Submit
  $form[$form_key]['range_slider_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
    '#name' => 'range_slider_submit_' . $form_key,
  );
  $form['#submit'][] = 'islandora_solr_search_range_slider_form_submit';
  
  // Validate
  $form['#validate'][] = 'islandora_solr_search_range_slider_form_validate';
  
  // include jquery ui slider
  jquery_ui_add(array('ui.slider'));
  // include flot
  drupal_add_js(drupal_get_path('module', 'islandora_solr_search') . '/js/flot/jquery.flot.min.js');
  // @TODO: find a good way to call this for IE8 and lower
  // <!--[if lte IE 8]><![endif]-->
  //drupal_add_js(drupal_get_path('module', 'islandora_solr_search') . '/js/flot/excanvas.min.js');
  
  // include jquery ui css
  drupal_add_css('sites/all/libraries/jquery.ui/themes/base/ui.slider.css');
  // include slider settings
  drupal_add_js(array('islandora_solr_search_range_slider' => array($solr_field => array('solr_field' => $solr_field, 'form_key' => $form_key, 'data' => $facet_data, 'slider_color' => $slider_color))), 'setting');
  
  return $form;
}

function islandora_solr_search_range_slider_form_validate($form, &$form_state) {
  
}


function islandora_solr_search_range_slider_form_submit($form, &$form_state) {
  
//  dsm($form_state);

  $form_state['rebuild'] = TRUE;
  
  // set variables
  global $queryClass;
  $params = isset($queryClass->internalSolrParams) ? $queryClass->internalSolrParams : array();
  // set path
  $path = SOLR_SEARCH_PATH . '/' . $queryClass->solrQuery;
  // form key
  $form_key = $form_state['clicked_button']['#array_parents'][0];
  // term
  $term = $form_state['values']['range_slider_term'];

  // date
  $from = $form_state['values'][$form_key]['range_slider_hidden_from'];
  $to = $form_state['values'][$form_key]['range_slider_hidden_to'];
  
  // create filter
  $filter = "$term:[$from TO $to]";

  // set date filter key if there are no date filters included
  if (isset($params['f'])) {
    foreach ($params['f'] as $key => $f) {
      if (strpos($f, $term) !== FALSE) {
        array_splice($params['f'], $key);
      }
    }
    $params['f'][] = $filter;
    $query = $params;
  }
  else {
    $query = array_merge_recursive($params, array('f' => array($filter)));
  }

  // redirect
  drupal_goto($path, $query);
}




/**
 * islandora solr search
 * @global type $queryClass
 * @param type $query
 * @param type $fq
 * @param type $dismax
 * @return type
 */
function islandora_solr_search($query = NULL) {
  global $queryClass;
  
  // set title
  drupal_set_title(t('Search Results'));
  
  // get all url parameters
  $params = $_GET;
 
  // get profiles
  $primary_profiles = module_invoke_all('islandora_solr_primary_display');
  $secondary_profiles = module_invoke_all('islandora_solr_secondary_display');
  
// Get the preferred display profile
  // Order: First choice is what's in the ?profile query var
  //        Second choice is the primary display profile
  //        Third choice is the default IslandoraSolrResults
  $enabled_profiles = array();
  // get enabled displays
  $primary_display_array = variable_get('islandora_solr_primary_display_table', array());
  // if it's set, we take these values
  if (isset($primary_display_array['enabled'])) {
    foreach ($primary_display_array['enabled'] as $key => $value) {
      if ($key === $value) {
        $enabled_profiles[] = $key;
      }
    }
  }

  // Set primary display
  // check if display param is an valid, enabled profile. Else show default.
  if (isset($params['display']) AND in_array($params['display'], $enabled_profiles)) {
    $islandora_solr_primary_display = $params['display'];
  }
  else {
    $islandora_solr_primary_display = variable_get('islandora_solr_primary_display', 'default');
    // unset invalid parameter
    unset($params['display']);
  }
  
  
  // Build and execute Apache Solr query
  $queryResult = $queryClass->buildAndExecuteQuery($query, $params);

  // TODO: Also filter secondary displays against those checked in the configuration options.
  if (isset($secondary_profiles[$_GET['solr_profile']])) {
    $profile = $secondary_profiles[$_GET['solr_profile']];
  }
  elseif (isset($primary_profiles[$islandora_solr_primary_display])) {
    $profile = $primary_profiles[$islandora_solr_primary_display];
  }
  else {
    drupal_set_message(check_plain(t('There is an error in the solr search configuration: the display profile is not found.')), 'error');
    $profile = $primary_profiles['default'];
  }
  // Include the file for the display profile
  require_once(drupal_get_path('module', $profile['module']) . '/' . $profile['file']);

  // Set display class and function vars
  $solrClass = $profile['class'];
  $solrFunction = $profile['function'];

  $nope = FALSE;

  if (class_exists($solrClass)) {
    $implementation = new $solrClass();
  }
  else {
    $nope = TRUE;
  }

  if (!$nope && method_exists($implementation, $solrFunction)) {
    $output = $implementation->$solrFunction($queryClass);
  }
  else {
    $nope = TRUE;
  }

  if ($nope) {
    module_load_include('inc', 'islandora_solr_search', 'IslandoraSolrResults');
    $resultsClass = new IslandoraSolrResults();
    $output = $resultsClass->displayResults($queryClass);
  }

  if (variable_get('islandora_solr_search_debug_mode', 0)) { // debug dump
    drupal_set_message(t('Params: <br/><pre>!debug</pre>', array('!debug' => print_r($queryClass->solrParams, TRUE))), 'status');
  }

  return $output;
}

/**
 * Implementation of hook_help().
 */
function islandora_solr_search_help($path, $arg) {
  switch ($path) {
    case 'admin/help#islandora_solr_search':
      return t(
          '<p>
         The Islandora Solr Search extends the functionality of the Fedora_Repository module.
         This module allows one or more of a series of blocks to be configured to search a solr index.
         This module can co-exist with the original Fedora_Repositories search block, but Solr\'s
         additional functionality will normally make the original block redundant.
         </p>
         <p>
         The !guide contains additonal information.
         </p>
         <ul>
           <li>Islandora Solr Search requires a working Solr instance. The !sWiki has full setup instructions</li>
           <li>Once Solr is running and tested, configure <b>Gsearch</b> to update Solr. Consult the !GSearch for details.</li>
           <li>Retreive the !client, unzip it, and copy the <b>Solr</b> directory from the archive to the islandora_solr_search module\'s folder.</li>
           <li>Go to Administer &gt; Site Configuration &gt; Islandora Solr Client <em>(or click the link below)</em> to configure the module. Set which Solr request handler to use, set the port, host and context for the index to be queried, and select which fields are to be used for filtering. Solr\'s <b>schema.xml</b> and  <b>solrconfig.xml</b> must be configured for the request handler as well as which  fields to index and return.</li>
           <li>The module allows custom code to be used to display search results.&nbsp; If custom PHP code is used, the paths to that codes\'s file and function must be entered here as well.</li>
           <li>Three different blocks are now available under Administer &gt; Site Building &gt; Blocks:&nbsp; Islandora Solr Simple Search Block, Islandora Solr Facet Block, and Islandora Solr Search Block.&nbsp; The configuration setting for each of these blocks will allow you to control their position on the screen, and on which pages they will be displayed.</li>
           <li>The Islandora Solr Simple Search Block will use will add  defType=dismax to the configured request handler. The request handler tag in <b>solrconfig.xml</b> must have an attribute of <b>default="TRUE"</b>.</li>
         </ul>
        ', array(
        '!guide' => l('Islandora Guide', 'https://wiki.duraspace.org/display/ISLANDORA/Islandora+Guide'),
        '!sWiki' => l("Solr Wiki", 'http://wiki.apache.org/solr/SolrTomcat'),
        '!GSearch' => l('GSearch Documentation', 'https://wiki.duraspace.org/display/FCSVCS/Generic+Search+Service+2.2'),
        '!client' => l('Apache Solr php client', 'http://code.google.com/p/solr-php-client'),
          )
      );
  }
}
